---
description: 
globs: 
alwaysApply: false
---
# Testing Standards

## Test Structure
```typescript
// Button.test.tsx
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { Button } from './Button'

describe('Button', () => {
  it('renders with default props', () => {
    render(<Button>Click me</Button>)
    expect(screen.getByRole('button')).toHaveTextContent('Click me')
  })

  it('handles click events', async () => {
    const handleClick = jest.fn()
    render(<Button onClick={handleClick}>Click me</Button>)
    await userEvent.click(screen.getByRole('button'))
    expect(handleClick).toHaveBeenCalled()
  })
})
```

## Unit Testing
- Test individual components
- Test utility functions
- Test hooks
- Test error handling
- Test edge cases

## Integration Testing
- Test component interactions
- Test data flow
- Test routing
- Test form submissions
- Test API interactions

## E2E Testing
- Test critical user flows
- Test authentication
- Test navigation
- Test form submissions
- Test error scenarios

## Best Practices
- Write meaningful test descriptions
- Use proper test isolation
- Implement proper mocking
- Follow testing best practices
- Use proper assertions
- Test accessibility
- Test error handling

## Test Coverage
- Aim for high test coverage
- Test critical paths
- Test edge cases
- Test error scenarios
- Test accessibility

## Performance Testing
- Test component rendering
- Test data fetching
- Test animations
- Test loading states
- Test error handling 